using ResumeAnalyzer.API.Data;
using ResumeAnalyzer.API.Models;
using Microsoft.EntityFrameworkCore;
using System.Text.RegularExpressions;
using UglyToad.PdfPig;
using Xceed.Words.NET;

namespace ResumeAnalyzer.API.Services
{
    public class ResumeParserService : IResumeParserService
    {
        private readonly ApplicationDbContext _context;

        public ResumeParserService(ApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<ResumeAnalysis> ParseResumeAsync(IFormFile file)
        {
            string text = await ExtractTextFromFileAsync(file);

            // Use regex to extract fields
            string email = Regex.Match(text, @"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}").Value;
            string phone = Regex.Match(text, @"(\+\d{1,3}[- ]?)?\d{10,}").Value;
            string name = ExtractName(text);
            var skills = ExtractSkills(text);
            var education = ExtractEducation(text);
            var experience = ExtractExperience(text);

            var analysis = new ResumeAnalysis
            {
                Name = name,
                Email = email,
                Phone = phone,
                Location = "", // Could use NLP/geocoding for better extraction
                LinkedIn = ExtractLinkedIn(text),
                Skills = skills,
                Certifications = ExtractCertifications(text),
                WorkExperience = experience,
                Education = education
            };

            _context.ResumeAnalyses.Add(analysis);
            await _context.SaveChangesAsync();

            return analysis;
        }

        private async Task<string> ExtractTextFromFileAsync(IFormFile file)
        {
            var ext = Path.GetExtension(file.FileName).ToLowerInvariant();
            if (ext == ".pdf")
            {
                using var stream = file.OpenReadStream();
                using var pdf = PdfDocument.Open(stream);
                var text = string.Join("\n", pdf.GetPages().Select(p => p.Text));
                return text;
            }
            else if (ext == ".docx")
            {
                using var stream = file.OpenReadStream();
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                using var doc = DocX.Load(ms);
                return doc.Text;
            }
            else if (ext == ".doc")
            {
                // For .doc, you may use a library like NPOI or convert to .docx
                throw new NotSupportedException(".doc format not supported in this demo. Please use PDF or DOCX.");
            }
            else
            {
                throw new NotSupportedException("Unsupported file type.");
            }
        }

        private string ExtractName(string text)
        {
            // Simple heuristic: first line or line with capitalized words
            var lines = text.Split('\n');
            foreach (var line in lines)
            {
                if (line.Trim().Length > 0 && Regex.IsMatch(line.Trim(), @"^[A-Z][a-z]+( [A-Z][a-z]+)+$"))
                    return line.Trim();
            }
            return lines.FirstOrDefault()?.Trim() ?? "";
        }

        private List<string> ExtractSkills(string text)
        {
            // Look for a "Skills" section
            var match = Regex.Match(text, @"Skills[\s:]*([\s\S]+?)(\n\n|Education|Experience|$)", RegexOptions.IgnoreCase);
            if (match.Success)
            {
                var skillsText = match.Groups[1].Value;
                return Regex.Split(skillsText, @",|\n|\r").Select(s => s.Trim()).Where(s => s.Length > 1).ToList();
            }
            return new List<string>();
        }

        private List<Education> ExtractEducation(string text)
        {
            // Look for an "Education" section
            var match = Regex.Match(text, @"Education[\s:]*([\s\S]+?)(\n\n|Skills|Experience|$)", RegexOptions.IgnoreCase);
            var list = new List<Education>();
            if (match.Success)
            {
                var eduText = match.Groups[1].Value;
                var lines = eduText.Split('\n');
                foreach (var line in lines)
                {
                    if (line.Trim().Length > 2)
                        list.Add(new Education { Degree = line.Trim(), School = "", Year = "" });
                }
            }
            return list;
        }

        private List<WorkExperience> ExtractExperience(string text)
        {
            // Look for an "Experience" section
            var match = Regex.Match(text, @"Experience[\s:]*([\s\S]+?)(\n\n|Skills|Education|$)", RegexOptions.IgnoreCase);
            var list = new List<WorkExperience>();
            if (match.Success)
            {
                var expText = match.Groups[1].Value;
                var lines = expText.Split('\n');
                foreach (var line in lines)
                {
                    if (line.Trim().Length > 2)
                        list.Add(new WorkExperience { Title = line.Trim(), Company = "", Duration = "", Description = "" });
                }
            }
            return list;
        }

        private List<string> ExtractCertifications(string text)
        {
            // Look for a "Certifications" section
            var match = Regex.Match(text, @"Certifications[\s:]*([\s\S]+?)(\n\n|Skills|Education|Experience|$)", RegexOptions.IgnoreCase);
            if (match.Success)
            {
                var certText = match.Groups[1].Value;
                return Regex.Split(certText, @",|\n|\r").Select(s => s.Trim()).Where(s => s.Length > 1).ToList();
            }
            return new List<string>();
        }

        private string ExtractLinkedIn(string text)
        {
            var match = Regex.Match(text, @"linkedin\.com/in/[a-zA-Z0-9-_]+", RegexOptions.IgnoreCase);
            return match.Success ? match.Value : "";
        }

        public async Task<ResumeAnalysis?> GetResumeAnalysisAsync(int id)
        {
            return await _context.ResumeAnalyses
                .Include(r => r.WorkExperience)
                .Include(r => r.Education)
                .FirstOrDefaultAsync(r => r.Id == id);
        }

        public async Task<List<ResumeAnalysis>> GetAllResumeAnalysesAsync()
        {
            return await _context.ResumeAnalyses
                .Include(r => r.WorkExperience)
                .Include(r => r.Education)
                .OrderByDescending(r => r.CreatedAt)
                .ToListAsync();
        }
    }
} 